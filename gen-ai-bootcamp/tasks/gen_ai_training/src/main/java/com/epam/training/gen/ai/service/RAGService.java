package com.epam.training.gen.ai.service;

import com.epam.training.gen.ai.config.KernelFunctionConfig;
import com.epam.training.gen.ai.util.DocumentQueryProcessor;
import com.microsoft.semantickernel.Kernel;
import com.microsoft.semantickernel.orchestration.FunctionResult;
import com.microsoft.semantickernel.orchestration.ToolCallBehavior;
import com.microsoft.semantickernel.semanticfunctions.KernelFunction;
import com.microsoft.semantickernel.semanticfunctions.KernelFunctionArguments;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

import java.io.IOException;

/**
 * This {@code RAGService} class performs the embedding generations and vector search based on
 * method parameters provided.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class RAGService {

  private final Kernel kernel;
  private final EmbeddingService embeddingService;
  private final KernelFunctionConfig KernelFunctionConfig;
  private final DocumentQueryProcessor documentQueryProcessor;

  /**
   * Takes user input as a method parameter , performs embedding generations and input and searches
   * for relevant embeddings and provided response.
   *
   * @param text user prompt
   * @return Returns response generated by RAG
   */
  public Mono<String> getRagResponse(String text) {
    try {
      String embedding = embeddingService.searchEmbeddings(text);
      String prompt =
          documentQueryProcessor
              .RAG_PROMPT
              .replace("{{question}}", text)
              .replace("{{chunk}}", embedding);
      KernelFunction<String> kernelFunction = KernelFunctionConfig.buildKernelFunction(prompt);
      return kernel
          .invokeAsync(kernelFunction)
          .withArguments(KernelFunctionArguments.builder().withInput(prompt).build())
          .withToolCallBehavior(ToolCallBehavior.allowAllKernelFunctions(true))
          .mapNotNull(FunctionResult::getResult)
          .onErrorResume(e -> Mono.error(new RuntimeException(e)));

    } catch (IOException e) {
      log.error("Error in generating response: ", e);
      throw new RuntimeException(e);
    }
  }
}
